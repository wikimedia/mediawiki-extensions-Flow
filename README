/**
 *
 * Documentation
 *
 */

// Only matters when $wgCapitalLinks has non-default setting, but always safe
$wgCapitalLinkOverrides[NS_TOPIC] = true;

// Flow Content Type
$wgContentHandlers['flow-board'] = 'Flow\Content\BoardContentHandler';

// User permissions
// Added to $wgFlowGroupPermissions instead of $wgGroupPermissions immediately,
// to easily fetch Flow-specific permissions in tests/PermissionsTest.php.
// If you wish to make local permission changes, add them to $wgGroupPermissions
// directly - tests will fail otherwise, since they'll be based on a different
// permissions config than what's assumed to test.
$wgFlowGroupPermissions = array();
$wgFlowGroupPermissions['*']['flow-hide'] = true;
$wgFlowGroupPermissions['user']['flow-lock'] = true;
$wgFlowGroupPermissions['sysop']['flow-lock'] = true;
$wgFlowGroupPermissions['sysop']['flow-delete'] = true;
$wgFlowGroupPermissions['sysop']['flow-edit-post'] = true;
$wgFlowGroupPermissions['oversight']['flow-suppress'] = true;
$wgFlowGroupPermissions['flow-bot']['flow-create-board'] = true;

// Configuration

// URL for more information about the Flow notification system
$wgFlowHelpPage = '//www.mediawiki.org/wiki/Special:MyLanguage/Help:Extension:Flow';

// $wgFlowCluster will define what external DB server should be used.
// If set to false, the current database (wfGetDB) will be used to read/write
// data from/to. If Flow data is supposed to be stored on an external database,
// set the value of this variable to the $wgExternalServers key representing
// that external connection.
$wgFlowCluster = false;

// Database to use for Flow metadata.  Set to false to use the wiki db.  Any number of wikis can
// and should share the same Flow database.
$wgFlowDefaultWikiDb = false;

// Used for content storage.  False to store content in flow db. Otherwise a cluster or
// list of clusters to use with ExternalStore.  Provided clusters must exist in
// $wgExternalStores. Multiple clusters required for HA, so inserts can continue
// if one of the masters is down for maint or any other reason.
// ex:
//     $wgFlowExternalStore = array( 'DB://cluster24', 'DB://cluster25' );
$wgFlowExternalStore = false;

// By default, Flow will store content in HTML.  However, this requires having Parsoid up
// and running, as it'll be necessary to convert HTML to wikitext for the basic editor.
// (n.b. to use VisualEditor, you'll definitely need Parsoid, so if you do support VE,
// might as well set this to HTML right away)
// If $wgFlowParsoidURL is null, $wgFlowContentFormat will be forced to wikitext.
//
// The 'wikitext' format is likely to be deprecated in the future.
$wgFlowContentFormat = 'html'; // possible values: html|wikitext XXX bug 70148 with wikitext

// Flow Parsoid config
// Please note that this configuration is separate from VE's Parsoid config:
// you'll have to fill out these variables too if you want to use Parsoid.
$wgFlowParsoidURL = null; // also see $wgVisualEditorParsoidURL
$wgFlowParsoidPrefix = null; // also see $wgVisualEditorParsoidPrefix
$wgFlowParsoidTimeout = null; // In seconds; also see $wgVisualEditorParsoidTimeout
// Forward users' Cookie: headers to Parsoid. Required for private wikis (login required to read).
// If the wiki is not private (i.e. $wgGroupPermissions['*']['read'] is true) this configuration
// variable will be ignored.
//
// This feature requires a non-locking session store. The default session store will not work and
// will cause deadlocks when trying to use this feature. If you experience deadlock issues, enable
// $wgSessionsInObjectCache.
//
// WARNING: ONLY enable this on private wikis and ONLY IF you understand the SECURITY IMPLICATIONS
// of sending Cookie headers to Parsoid over HTTP. For security reasons, it is strongly recommended
// that $wgVisualEditorParsoidURL be pointed to localhost if this setting is enabled.
$wgFlowParsoidForwardCookies = false;

// When visiting the flow for an article but not specifying what type of workflow should be viewed,
// use this workflow
$wgFlowDefaultWorkflow = 'discussion';

// Limits for paging
$wgFlowDefaultLimit = 10;
$wgFlowMaxLimit = 100;

// Maximum number of users that can be mentioned in one comment
$wgFlowMaxMentionCount = 100;

// Pages to occupy is an array of normalised page names, e.g. array( 'User talk:Zomg' ).
$wgFlowOccupyPages = array();

// Namespaces to occupy is an array of NS_* constants, e.g. array( NS_USER_TALK ).
$wgFlowOccupyNamespaces = array();

// Max threading depth
$wgFlowMaxThreadingDepth = 8;

// A list of editors to use, in priority order
$wgFlowEditorList = array( 'none' );  // EXPERIMENTAL prepend 'visualeditor'

// Set this to false to disable all memcache usage.  Do not just turn the cache
// back on, it will be out of sync with the database.  There is not yet an official
// process for re-sync'ing the cache yet, currently the per-index versions would
// need to incremented(ask the flow team).
//
// This will reduce, but not necessarily kill, performance.  The queries issued
// will be the queries necessary to fill the cache rather than only the queries
// needed to answer the request.  A bit of a refactor in ObjectManager::findMulti
// to allow query without indexes, along with adjusting container.php to only
// include the indexes when this is true, would get most of the way towards making
// this a reasonably performant option.
$wgFlowUseMemcache = true;

// The default length of time to cache flow data in memcache.  This value can be tuned
// in conjunction with measurements of cache hit/miss ratios to achieve the desired
// tradeoff between memory usage, db queries, and response time. The initial default
// of 3 days means Flow will attempt to keep in memcache all data models requested in
// the last 3 days.
$wgFlowCacheTime = 60 * 60 * 24 * 3;
// A version string appended to cache keys. Bump this if cache format or logic changes.
// Flow can be a cross-wiki database accessed by wikis running different versions of the
// Flow code; WMF sometimes overrides this globally in wmf-config/CommonSettings.php
$wgFlowCacheVersion = '4.7';

// ElasticSearch servers
$wgFlowSearchServers = array( 'localhost' );

// Flow search config setting - akin to CirrusSearch
// See CirrusSearch.php for documentation for these params, which have similar
// variable names (s/FlowSearch/CirrusSearch/)
$wgFlowSearchConnectionAttempts = 1; // see $wgCirrusSearchConnectionAttempts
$wgFlowSearchBannedPlugins = array(); // see $wgCirrusSearchBannedPlugins
$wgFlowSearchOptimizeIndexForExperimentalHighlighter = false; // see $wgCirrusSearchOptimizeIndexForExperimentalHighlighter
$wgFlowSearchMaxShardsPerNode = array(); // see $wgCirrusSearchMaxShardsPerNode
$wgFlowSearchRefreshInterval = 1; // see $wgCirrusSearchRefreshInterval
$wgFlowSearchMaintenanceTimeout = 3600; // see $wgCirrusSearchMaintenanceTimeout
$wgFlowSearchReplicas = '0-2'; // see $wgCirrusSearchReplicas
$wgFlowSearchShardCount = array( 'flow' => 4 ); // see $wgCirrusSearchShardCount
$wgFlowSearchCacheWarmers = array(); // see $wgCirrusSearchCacheWarmers
$wgFlowSearchMergeSettings = array(
	'flow' => array(
		'max_merge_at_once' => 10,
		'segments_per_tier' => 10,
		'reclaim_deletes_weight' => 2.0,
		'max_merged_segment' => '5g',
	),
); // see $wgCirrusSearchMergeSettings
$wgFlowSearchIndexAllocation = array(
	'include' => array(),
	'exclude' => array(),
	'require' => array(),
); // see $wgCirrusSearchIndexAllocation

// Custom group name for AbuseFilter
// Acceptable values:
// * a specific value for flow-specific filters
// * 'default' to use core filters; make sure they are compatible with both core
//   and Flow (e.g. Flow has no 'summary' variable to test on)
// * false to not use AbuseFilter
$wgFlowAbuseFilterGroup = 'flow';

// AbuseFilter emergency disable values for Flow
$wgFlowAbuseFilterEmergencyDisableThreshold = 0.10;
$wgFlowAbuseFilterEmergencyDisableCount = 50;
$wgFlowAbuseFilterEmergencyDisableAge = 86400; // One day.

// Timeout for Flow's AJAX requests (only affects ones that go through flow-api.js), in seconds
$wgFlowAjaxTimeout = 30;

// Actions that must pass through to MediaWiki on Flow-enabled pages
$wgFlowCoreActionWhitelist = array( 'info', 'protect', 'unprotect', 'unwatch', 'watch', 'history', 'wikilove', 'move', 'delete' );

// When set to true Flow will compile templates into their intermediate forms
// on every run.  When set to false Flow will use the versions already written
// to disk. Production should always have this set to false.
$wgFlowServerCompileTemplates = false;

// Enable/disable event logging
$wgFlowEventLogging = false;
