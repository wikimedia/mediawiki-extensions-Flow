{
  "comments": [
    {
      "key": {
        "uuid": "19cf258f_727362a3",
        "filename": "Hooks.php",
        "patchSetId": 3
      },
      "lineNbr": 2183,
      "author": {
        "id": 34
      },
      "writtenOn": "2018-10-05T19:07:39Z",
      "side": 1,
      "message": "This hook is documented as follows:\n\n\u003e \u0027ChangesListSpecialPageQuery\u0027: Called when building SQL query\n\u003e on pages inheriting from ChangesListSpecialPage (in core: RecentChanges, RecentChangesLinked and Watchlist).\n\u003e [..]\n\u003e $opts: FormOptions for this request\n\nThe ChangesListSpecialPage base class, creates the FormOptions instance in its getDefaultOptions() method, where the \"hidepageedits\" is always and unconditionally set.\n\nWhile it is reasonable for a hook consumer to modify that value, making it absent seems a violation of the contract. It would require that every consumer of the hook and every caller of the hook doubt every use of get() with a try/catch, which doesn\u0027t make sense.\n\nThe problem here is that SpecialMobileWatchlist is not extending ChangesListSpecialPage and also not calling getDefaultOptions() by other means.\n\nPassing an empty FormOptions instance does not seem valid under the hook contract?",
      "range": {
        "startLine": 2181,
        "startChar": 2,
        "endLine": 2183,
        "endChar": 6
      },
      "revId": "0dbd3b6dffb12b84012df2a694fe4fc3930e32ea",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7223885_60f87c5c",
        "filename": "Hooks.php",
        "patchSetId": 3
      },
      "lineNbr": 2183,
      "author": {
        "id": 94
      },
      "writtenOn": "2018-10-05T19:14:37Z",
      "side": 1,
      "message": "Given, $opts-\u003egetValue (through its validate call) can throw an exception it seems sensible to me to guard against this. If hidepageedits was ever renamed the same problem would happen. it requires too much detective work to clarify what the contract is here. From my perspective the only contract that\u0027s explicit is the hook will get a FormOptions and it feels a bit far-fetched to say we can infer what the contents of that class. Alternatively FormOptions should return undefined for such calls that cannot be validated.\n\nLonger term we plan to get rid of SpecialMobileWatchlist altogether so this won\u0027t be a problem, but such a guard would still be useful here IMO\n\nIf you don\u0027t like this approach the alternative that I will push for is removing the running of the hook in Watchlist altogether, which is likely to have more undesirable effects such as making Flow edits and Wikidata changes show up there (or not show... I\u0027m not an expert on what this hook is used for).\n\nCalling a getter and getting an exception does not seem sane to me.",
      "parentUuid": "19cf258f_727362a3",
      "range": {
        "startLine": 2181,
        "startChar": 2,
        "endLine": 2183,
        "endChar": 6
      },
      "revId": "0dbd3b6dffb12b84012df2a694fe4fc3930e32ea",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1de29614_63075345",
        "filename": "Hooks.php",
        "patchSetId": 3
      },
      "lineNbr": 2183,
      "author": {
        "id": 34
      },
      "writtenOn": "2018-10-05T19:23:05Z",
      "side": 1,
      "message": "Removing the hook seems adequate.\n\nIn the interim, you may want to provide an alternate Mobile-specific hook that Wikidata and Flow can opt-in to using whereby it is explicit that these filter options from core are not available, which means it is explicit that Wikidata/Flow logic has to perform its duty without knowing what these are set to.\n\nRight now they are given an object with incorrect indication of absence, and might potentially set() options as well, which become no-op and can create other bugs and conflicts.\n\nAs for the exception, yes get() can throw. When that happens, it means the caller is broken and needs to be updated. That\u0027s a good thing.\n\nIf a FormOptions key is meant to be optional (e.g. not from core but from another extension that is not hard-depended on), then it makes sense to catch any exception, in which case the caller would have a reasonable idea as for what to fall back to  (e.g. the extension isn\u0027t installed)\n\nA \u0027catch\u0027 for a core key of FormOptions on a changes list isn\u0027t useful because the caller can\u0027t know what happened. It is an application error. What will they do? Did core rename the option? Then the exception shouldn\u0027t be good but the caller updated. Is core broken? How do we know what the default should be? That decision is in core, not in the extension. Flow has no business assuming whether it should be shown or not. Wikidata might make a different assumption and create incompatible output.",
      "parentUuid": "f7223885_60f87c5c",
      "range": {
        "startLine": 2181,
        "startChar": 2,
        "endLine": 2183,
        "endChar": 6
      },
      "revId": "0dbd3b6dffb12b84012df2a694fe4fc3930e32ea",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}