<?php

namespace Flow;

use MediaWiki\Extension\Notifications\Hooks\BeforeDisplayOrangeAlertHook;
use MediaWiki\Extension\Notifications\Hooks\BeforeEchoEventInsertHook;
use MediaWiki\Extension\Notifications\Hooks\EchoAbortEmailNotificationHook;
use MediaWiki\Extension\Notifications\Model\Event;
use MediaWiki\Title\Title;
use MediaWiki\User\User;
use MediaWiki\User\UserIdentity;

class EchoHooks implements
	BeforeDisplayOrangeAlertHook,
	BeforeEchoEventInsertHook,
	EchoAbortEmailNotificationHook
{

	/**
	 * Suppress all Echo notifications generated by the Talk page manager user
	 *
	 * @param Event $event
	 * @return bool
	 */
	public function onBeforeEchoEventInsert( Event $event ) {
		$agent = $event->getAgent();

		if ( $agent === null ) {
			return true;
		}

		if ( Hooks::isTalkpageManagerUser( $agent ) ) {
			return false;
		}

		return true;
	}

	/**
	 * Don't send email notifications that are imported from LiquidThreads.  It will
	 * still be in their web notifications (if enabled), but they will never be
	 * notified via email (regardless of batching settings) for this particular
	 * notification.
	 * @param UserIdentity $user
	 * @param Event $event
	 * @return bool
	 */
	public function onEchoAbortEmailNotification( UserIdentity $user, Event $event ) {
		$extra = $event->getExtra();
		return !isset( $extra['lqtThreadId'] );
	}

	/**
	 * Hides the orange alert indicating 'You have a new message'
	 * when the user reads flow-topic replies.
	 *
	 * @param User $user
	 * @param Title $title
	 * @return bool true to show the alert, false to hide(abort) the alert
	 */
	public function onBeforeDisplayOrangeAlert( User $user, Title $title ) {
		if ( $title->getNamespace() === NS_TOPIC ) {
			/** @var Data\ObjectManager $storage */
			$storage = Container::get( 'storage.workflow' );
			$uuid = WorkflowLoaderFactory::uuidFromTitle( $title );
			/** @var Model\Workflow $workflow */
			$workflow = $storage->get( $uuid );
			if ( $workflow && $user->getTalkPage()->equals( $workflow->getOwnerTitle() ) ) {
				return false;
			}
		}

		return true;
	}
}
